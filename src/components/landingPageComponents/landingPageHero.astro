---
import { Image } from "astro:assets";
import Tick from "@assets/Turquoise_Tick_filled@3x.png";
import QRCode from "assets/Home QR Code Sample.png";
import { enCA, enUS, frCA, getLangFromUrl } from "strings/routing";
import QRContainerEn from "@assets/landingPage/QRCodes/getTheAppNow.svg";
import QRContainerFr from "@assets/landingPage/QRCodes/getTheAppContainerFr.svg";
import { miscellaneousStrings } from "strings/miscellaneous";

const language = getLangFromUrl(Astro.url);
const QRContainer = language === frCA ? QRContainerFr : QRContainerEn;

export type PromoHeroStrings = {
  title: string;
  paragraph: string;
  call?: string;
  number?: string;
  bullets: string[] | null;
  notes: string[] | undefined;
  QRAlt: string;
  QR: ImageMetadata;
  downloadLink: string;
  conversionName: string;
  leadName: string;
};

type Props = {
  strings: PromoHeroStrings;
  heroImage: ImageMetadata;
};
const localStrings = miscellaneousStrings[language];
const { strings: s, heroImage } = Astro.props;
const { conversionName, leadName } = s;
---

<div class="flex flex-col px-3">
  <div class="h-10"></div>
  <div class="flex w-full justify-center pt-4">
    <div class="flex lg:flex-row flex-col items-center">
      <div class="flex flex-col lg:hidden max-w-md text-night-sky h-full">
        <h1 class="text-5xl text-center lg:text-left font-semibold p-[1.25]">
          {s.title}
        </h1>
        <div class="h-[1.25rem]"></div>
        <p class="text-center lg:text-left">{s.paragraph}</p>
        {
          s.call && (
            <p class="text-center">
              {s.call}
            </p>
              <a class="text-center text-xl pt-4 font-medium" href={`tel:${s.number}`}>
                {s.number}
              </a>
          )
        }
        <div class="h-[2rem]"></div>
        <div class="flex lg:hidden justify-center pb-[2rem]">
          <a
            id="track-conversion"
            href={s.call ? `tel:${s.number}` : s.downloadLink}
            target={s.call ? "_self" : "_blank"}
            class="flex items-center justify-center"
            rel="noopener"
          >
            <div
              class="px-6 py-4 text-white font-medium text-xl rounded-lg bg-goose-pink"
            >
              <p>{s.call ? s.callNow : localStrings.downloadTheApp}</p>
            </div>
          </a>
        </div>
        {
          s.bullets &&
            s.bullets.map((phrase) => {
              return (
                <div class="flex py-2 items-center text-[0.9375rem]">
                  <Image
                    src={Tick}
                    width={18}
                    height={18}
                    alt=""
                    densities={[1.5, 2]}
                  />
                  <p class="pl-2">{phrase}</p>
                </div>
              );
            })
        }
        {s.bullets && <div class="h-[2rem]" />}

        <div class="hidden lg:flex h-[2rem]"></div>
        {
          !s.call && (
            <Image
              class="hidden lg:flex"
              src={QRCode}
              height={QRCode.height / 4}
              alt={"QR code to scan"}
            />
          )
        }
        <div class="hidden lg:flex h-20"></div>
      </div>
      <div class="flex flex-col items-center">
        <Image class="rounded-xl" src={heroImage} height={600} alt={s.QRAlt} />
      </div>
      <div class="flex w-[6rem]"></div>
      <div
        class="flex flex-col lg:justify-center max-w-md text-night-sky h-full"
      >
        <h1 class="hidden lg:block text-5xl font-semibold p-[1.25]">
          {s.title}
        </h1>
        <div class="h-[2rem]"></div>
        <p class="hidden lg:flex">{s.paragraph}</p>
        {
          s.call && (
            <p class="hidden lg:flex font-medium">
              {s.call}
            </p>
              <a class="hidden lg:flex text-dark-pink text-[32px] font-medium pt-4" href={`tel:${s.number}`}>
                {s.number}
              </a>
          )
        }
        <div class="hidden lg:flex h-[1rem]"></div>
        {
          s.bullets &&
            s.bullets.map((phrase) => (
              <div class="hidden lg:flex py-2 items-center text-[0.9375rem]">
                <Image
                  densities={[1.5, 2]}
                  src={Tick}
                  width={18}
                  height={18}
                  alt=""
                />
                <p class="pl-2">{phrase}</p>
              </div>
            ))
        }
        {s.bullets && <div class="hidden lg:flex h-[0.5rem]" />}
        <div class="hidden lg:flex h-[1rem]"></div>
        <div class="flex w-full">
          {
            !s.call && (
              <>
                <div class="hidden lg:flex">
                  <div class="border-4 border-goose-turquoise rounded-md">
                    <Image
                      densities={[1.5, 2]}
                      class="hidden lg:block"
                      src={s.QR}
                      height={120}
                      alt={s.QRAlt}
                    />
                  </div>
                  <div class="w-6" />
                  <Image
                    densities={[1.5, 2]}
                    class="-mt-4 -mr-6"
                    src={QRContainer}
                    alt=""
                    width={160}
                  />
                </div>
              </>
            )
          }
        </div>
      </div>
    </div>
  </div>
  <div class="lg:h-20"></div>
</div>
<script is:inline define:vars={{ leadName, conversionName }}>
  document.addEventListener("astro:page-load", function () {
    var button = document.getElementById("track-conversion");
    button?.addEventListener("click", function () {
      if (window.localStorage.getItem("cookie-consent")) {
        // Re-initialize Google Tag
        window.dataLayer = window.dataLayer || [];
        function gtag() {
          dataLayer.push(arguments);
        }
        gtag("js", new Date());
        gtag("config", "AW-788220788");
        // Report conversion.
        const url = window.location.href;
        var callback = function () {
          if (typeof url != "undefined") {
            window.location = `${url}?${conversionName ? conversionName : ""}`;
          }
        };
        console.log('Reporting conversion');
        gtag("event", "conversion", {
          send_to: "AW-788220788/-f1CCO6Cm7UBEPSW7fcC",
          event_callback: callback,
        });

        // Meta Pixel Tracking
        if (leadName) fbq("track", "Lead", { content_name: leadName });
      }
    });
  });
</script>
